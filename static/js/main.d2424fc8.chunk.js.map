{"version":3,"sources":["components/GameCard/GameCard.js","components/Card/Card.js","components/Modal/Modal.js","consts/Consts.js","components/Button/Button.js","components/Instruction/Instruction.js","Ddakji.js","GlassBridge.js","App.js","index.js"],"names":["GameCard","name","gameId","goToGame","className","onClick","viewBox","d","fill","Card","type","flipCard","selectCard","color","Modal","children","isModalOpen","isLogo","showSvg","showGreyBG","hidden","Consts","GAME_IDS","GLASS_BRIDGE","DDAKJI","GAME_LEVELS","START","PRESET","PLAY","END","CARD_COLORS","BLUE","RED","GAME_MAP","LEVEL_6","isActive","tiles","isSafe","isStepped","isCleared","nextLevel","LEVEL_5","LEVEL_4","LEVEL_3","LEVEL_2","LEVEL_1","Button","label","value","Instruction","setGameLevel","defaultProps","Ddakji","useState","isFlipped","setIsFlipped","priceWon","setPriceWon","slapsReceived","setSlapsReceived","gameLevel","selectedColor","setSelectedColor","showMessageModal","setShowMessageModal","modalMessage","setModalMessage","useEffect","keepFlipping","setTimeout","numOfFlips","Math","floor","random","i","toast","success","error","autoClose","console","log","infinite","isOpen","GlassBridge","_","cloneDeep","bridgeMap","setBridgeMap","constructTiles","position","bridgeLevels","Object","entries","forEach","key","push","level","currentBridgeMap","handleTileClick","App","currentGame","setCurrentGame","class","POSITION","TOP_RIGHT","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","transition","Flip","theme","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d2424fc8.chunk.js","sourcesContent":["import React from 'react';\nimport './GameCard.scss';\n\nconst GameCard = ({ name, gameId, goToGame }) => {\n  return (\n    <section\n      className={`card-wrapper `}\n      onClick={() => {\n        goToGame(gameId);\n      }}\n    >\n      <div className=\"content-wrapper\">\n        <svg className={`logo`} viewBox=\"0 0 191.99 60.82\">\n          <path\n            d=\"M28.3,10.23A22.3,22.3,0,1,1,6,32.53a22.29,22.29,0,0,1,22.3-22.3m0-6a28.3,28.3,0,1,0,28.29,28.3A28.33,28.33,0,0,0,28.3,4.23Z\"\n            fill=\"#fff\"\n          ></path>\n          <path\n            d=\"M186,10.57V54.49H142.06V10.57H186m6-6H136.06V60.49H192V4.57Z\"\n            fill=\"#fff\"\n          ></path>\n          <path\n            d=\"M93.18,12l23.7,41.05H69.48l23.7-41m0-12L88,9,64.28,50.05l-5.19,9h68.19l-5.2-9L98.38,9l-5.2-9Z\"\n            fill=\"#fff\"\n          ></path>\n        </svg>\n        <div className=\"content-inner\">{name}</div>\n      </div>\n    </section>\n  );\n};\n\nexport default GameCard;\n","import React from 'react';\nimport './card.scss';\n\nconst Card = ({ type, flipCard, selectCard, color }) => {\n  return type === 'front' ? (\n    <div\n      className={`card ${color}`}\n      onClick={() => (flipCard ? flipCard() : selectCard())}\n    >\n      <div className={`front flap ${color}`}></div>\n      <div className={`front pocket ${color}`}></div>\n    </div>\n  ) : (\n    <div\n      className={`card ${color}`}\n      onClick={() => (flipCard ? flipCard() : selectCard())}\n    ></div>\n  );\n};\n\nexport default Card;\n","import React from 'react';\nimport './modal.scss';\n\nconst Modal = ({\n  children,\n  isModalOpen,\n  isLogo = false,\n  showSvg = true,\n  showGreyBG = false,\n}) => {\n  return (\n    <span hidden={!isModalOpen}>\n      <section className={`modal-wrapper ${showGreyBG ? 'grey-bg' : ''}`}>\n        <div className=\"content-wrapper\">\n          {showSvg ? (\n            <svg\n              className={`${isLogo ? 'logo' : 'background'}`}\n              viewBox=\"0 0 191.99 60.82\"\n            >\n              <path\n                d=\"M28.3,10.23A22.3,22.3,0,1,1,6,32.53a22.29,22.29,0,0,1,22.3-22.3m0-6a28.3,28.3,0,1,0,28.29,28.3A28.33,28.33,0,0,0,28.3,4.23Z\"\n                fill=\"#fff\"\n              ></path>\n              <path\n                d=\"M186,10.57V54.49H142.06V10.57H186m6-6H136.06V60.49H192V4.57Z\"\n                fill=\"#fff\"\n              ></path>\n              <path\n                d=\"M93.18,12l23.7,41.05H69.48l23.7-41m0-12L88,9,64.28,50.05l-5.19,9h68.19l-5.2-9L98.38,9l-5.2-9Z\"\n                fill=\"#fff\"\n              ></path>\n            </svg>\n          ) : null}\n          <div className=\"content-inner\">{children}</div>\n        </div>\n      </section>\n    </span>\n  );\n};\n\nexport default Modal;\n","const Consts = {\n  GAME_IDS: {\n    GLASS_BRIDGE: 'gb',\n    DDAKJI: 'dd',\n  },\n\n  GAME_LEVELS: {\n    START: 'start',\n    PRESET: 'preset',\n    PLAY: 'play',\n    END: 'end',\n  },\n  CARD_COLORS: {\n    BLUE: 'blue',\n    RED: 'red',\n  },\n\n  GLASS_BRIDGE: {\n    GAME_MAP: {\n      LEVEL_6: {\n        isActive: false,\n        tiles: [\n          { isSafe: false, isStepped: false },\n          { isSafe: false, isStepped: false },\n        ],\n        isCleared: false,\n        nextLevel: false,\n      },\n      LEVEL_5: {\n        isActive: false,\n        tiles: [\n          { isSafe: false, isStepped: false },\n          { isSafe: false, isStepped: false },\n        ],\n        isCleared: false,\n        nextLevel: 'LEVEL_6',\n      },\n      LEVEL_4: {\n        isActive: false,\n        tiles: [\n          { isSafe: false, isStepped: false },\n          { isSafe: false, isStepped: false },\n        ],\n        isCleared: false,\n        nextLevel: 'LEVEL_5',\n      },\n      LEVEL_3: {\n        isActive: false,\n        tiles: [\n          { isSafe: false, isStepped: false },\n          { isSafe: false, isStepped: false },\n        ],\n        isCleared: false,\n        nextLevel: 'LEVEL_4',\n      },\n      LEVEL_2: {\n        isActive: false,\n        tiles: [\n          { isSafe: false, isStepped: false },\n          { isSafe: false, isStepped: false },\n        ],\n        isCleared: false,\n        nextLevel: 'LEVEL_3',\n      },\n      LEVEL_1: {\n        isActive: true,\n        tiles: [\n          { isSafe: false, isStepped: false },\n          { isSafe: false, isStepped: false },\n        ],\n        isCleared: false,\n        nextLevel: 'LEVEL_2',\n      },\n    },\n  },\n};\nexport default Consts;\n","import React from 'react';\nimport './button.scss';\n\nconst Button = ({ label, onClick }) => {\n  return (\n    <input\n      className=\"sg-button\"\n      type=\"button\"\n      value={label}\n      onClick={onClick}\n    />\n  );\n};\n\nexport default Button;\n","import React from 'react';\nimport './instruction.scss';\nimport Modal from '../Modal/Modal';\nimport Consts from '../../consts/Consts';\nimport Button from '../Button/Button';\n\nconst Instruction = ({ setGameLevel }) => {\n  return (\n    <Modal isModalOpen={true}>\n      <>\n        <h1>DDAKJI, The Recruiting Game</h1>\n        <p>Pick a color to play the Ddakji game</p>\n        <p>Click on the card to start the flipping</p>\n        <p>If you're lucky, the card will be flipped showing its back</p>\n        <p>If the card gets flipped, you'll be awarded 10000 won</p>\n        <p>If it doesn't, you'll be slapped once</p>\n        <p>\n          If you could win 100000 won before getting slapped 10 times, you're\n          recruited!\n        </p>\n        <Button\n          onClick={() => {\n            setGameLevel(Consts.GAME_LEVELS.PRESET);\n          }}\n          label=\"Start\"\n        />\n      </>\n    </Modal>\n  );\n};\n\nInstruction.defaultProps = {};\n\nexport default Instruction;\n","import React, { useState, useEffect } from 'react';\n\nimport './Ddakji.scss';\n\nimport Card from './components/Card/Card';\nimport Instruction from './components/Instruction/Instruction';\nimport Modal from './components/Modal/Modal';\nimport Button from './components/Button/Button';\n\nimport Consts from './consts/Consts';\n\nimport ReactCardFlip from 'react-card-flip';\nimport { toast } from 'react-toastify';\n\nconst Ddakji = ({ goToGame }) => {\n  const [isFlipped, setIsFlipped] = useState(false);\n  const [priceWon, setPriceWon] = useState(0);\n  const [slapsReceived, setSlapsReceived] = useState(0);\n  const [gameLevel, setGameLevel] = useState(Consts.GAME_LEVELS.START);\n  const [selectedColor, setSelectedColor] = useState(Consts.CARD_COLORS.BLUE);\n  const [showMessageModal, setShowMessageModal] = useState(false);\n  const [modalMessage, setModalMessage] = useState('');\n\n  useEffect(() => {\n    if (slapsReceived >= 10 || priceWon >= 100000) {\n      if (slapsReceived >= 10) {\n        setModalMessage(\n          \"Uh oh! You lost. Try again when you're more desperate\"\n        );\n      } else {\n        setModalMessage('You are our perfect candidate! Recruited.');\n      }\n      setShowMessageModal(true);\n    }\n  }, [priceWon, slapsReceived]);\n\n  const keepFlipping = (isFlipped) => {\n    setTimeout(() => {\n      setIsFlipped(isFlipped);\n    }, 0);\n  };\n\n  const resetGameValues = () => {\n    setGameLevel(Consts.GAME_LEVELS.START);\n    setSelectedColor(Consts.CARD_COLORS.BLUE);\n    setSlapsReceived(0);\n    setPriceWon(0);\n  };\n\n  const flipCard = () => {\n    let numOfFlips = Math.floor(Math.random() * (100 - 50) + 50);\n    for (let i = 0; i < numOfFlips; i++) {\n      keepFlipping(i % 2 === 0 ? true : false);\n    }\n    setTimeout(() => {\n      if (numOfFlips % 2 !== 0) {\n        if (priceWon < 90000) {\n          toast.success('Nice. You got 10000 won');\n        }\n        setPriceWon(priceWon + 10000);\n      } else {\n        if (slapsReceived < 9) {\n          toast.error(\n            \"Even Math.Random doesn't favour you. Please slap yourself!\",\n            {\n              autoClose: 2000,\n            }\n          );\n        }\n        setSlapsReceived(slapsReceived + 1);\n      }\n      setIsFlipped(false);\n    }, 1000);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"squid-game-bg\"></div>\n      <div\n        className=\"quit-game\"\n        onClick={() => {\n          goToGame(null);\n        }}\n      >\n        Quit Game\n      </div>\n\n      {gameLevel === Consts.GAME_LEVELS.START ? (\n        <Instruction setGameLevel={setGameLevel} />\n      ) : null}\n      {gameLevel === Consts.GAME_LEVELS.PRESET ? (\n        <Modal isModalOpen={true} isLogo={true}>\n          <div className=\"card-container\">\n            <div className=\"card-holder\">\n              <Card\n                type={'front'}\n                selectCard={() => {\n                  console.log('selected');\n                  setSelectedColor(Consts.CARD_COLORS.BLUE);\n                  setGameLevel(Consts.GAME_LEVELS.PLAY);\n                }}\n                color={Consts.CARD_COLORS.BLUE}\n              />\n            </div>\n            <div className=\"card-holder\">\n              <Card\n                type={'front'}\n                selectCard={() => {\n                  setSelectedColor(Consts.CARD_COLORS.RED);\n                  setGameLevel(Consts.GAME_LEVELS.PLAY);\n                }}\n                color={Consts.CARD_COLORS.RED}\n              />\n            </div>\n          </div>\n        </Modal>\n      ) : null}\n      {gameLevel === Consts.GAME_LEVELS.PLAY ? (\n        <>\n          <div className=\"counter slap\">\n            <span>Slaps : {slapsReceived}</span>/<span>10</span>\n          </div>\n          <div className=\"counter won\">\n            <span>Won : {priceWon}</span>/<span>100000</span>\n          </div>\n          <Modal isModalOpen={true} isLogo={true}>\n            <ReactCardFlip isFlipped={isFlipped} infinite={true}>\n              <Card type={'front'} flipCard={flipCard} color={selectedColor} />\n              <Card type={'back'} flipCard={flipCard} color={selectedColor} />\n            </ReactCardFlip>\n          </Modal>\n        </>\n      ) : null}\n      {gameLevel === Consts.GAME_LEVELS.END ? (\n        <Instruction isOpen={true} />\n      ) : null}\n      {showMessageModal ? (\n        <Modal isModalOpen={showMessageModal} showSvg={false} showGreyBG>\n          <>\n            <p>{modalMessage}</p>\n            <Button\n              onClick={() => {\n                setShowMessageModal(false);\n                resetGameValues();\n              }}\n              label={'Play Again'}\n            />\n          </>\n        </Modal>\n      ) : null}\n    </div>\n  );\n};\n\nexport default Ddakji;\n","import React, { useState } from 'react';\n\nimport './GlassBridge.scss';\nimport Consts from './consts/Consts';\nimport Modal from './components/Modal/Modal';\nimport Button from './components/Button/Button';\n\nimport _ from 'lodash';\nimport { toast } from 'react-toastify';\n\nconst GlassBridge = ({ goToGame }) => {\n  const [bridgeMap, setBridgeMap] = useState(\n    _.cloneDeep(Consts.GLASS_BRIDGE.GAME_MAP)\n  );\n  const [showMessageModal, setShowMessageModal] = useState(false);\n  const [modalMessage, setModalMessage] = useState('');\n\n  const handleTileClick = (level, position, nextLevel) => {\n    let currentBridgeMap = { ...bridgeMap };\n    if (\n      currentBridgeMap[level]['isActive'] ||\n      currentBridgeMap[level]['isCleared']\n    ) {\n      Object.entries(currentBridgeMap).forEach(([key, value]) => {\n        currentBridgeMap[key]['tiles'][0]['isStepped'] = false;\n        currentBridgeMap[key]['tiles'][1]['isStepped'] = false;\n      });\n      currentBridgeMap[level]['tiles'][position]['isStepped'] = true;\n      if (currentBridgeMap[level]['isActive']) {\n        let safeTilePosition = Math.random() > 0.5 ? 1 : 0;\n        if (safeTilePosition === position) {\n          currentBridgeMap[level]['isActive'] = false;\n          currentBridgeMap[level]['tiles'][position]['isSafe'] = true;\n          currentBridgeMap[level]['isCleared'] = true;\n          if (currentBridgeMap[nextLevel]) {\n            currentBridgeMap[nextLevel]['isActive'] = true;\n          } else {\n            setModalMessage('Yay! You made it. Go live to see another day.');\n            setShowMessageModal(true);\n            currentBridgeMap = _.cloneDeep(Consts.GLASS_BRIDGE.GAME_MAP);\n          }\n        } else {\n          setModalMessage(\"Uh oh! You're dead, Hard Luck.\");\n          setShowMessageModal(true);\n          currentBridgeMap = _.cloneDeep(Consts.GLASS_BRIDGE.GAME_MAP);\n        }\n      } else {\n        if (currentBridgeMap[level]['tiles'][position]['isSafe']) {\n          toast(\"You're safe, Move to the active level\");\n        } else {\n          setModalMessage(\"Uh oh! You're dead, You can't be this dumb.\");\n          setShowMessageModal(true);\n          currentBridgeMap = _.cloneDeep(Consts.GLASS_BRIDGE.GAME_MAP);\n        }\n      }\n      setBridgeMap(currentBridgeMap);\n    }\n  };\n\n  const constructTiles = (position) => {\n    let bridgeLevels = [];\n    Object.entries(bridgeMap).forEach(([key, value]) => {\n      bridgeLevels.push(\n        <div\n          key={key + position}\n          className={`gb-bridge-level ${value.isActive ? 'active' : ''} ${\n            value.tiles[position]['isStepped']\n              ? value.tiles[position]['isSafe']\n                ? 'safe'\n                : 'unsafe'\n              : ''\n          }`}\n          onClick={() => {\n            handleTileClick(key, position, value.nextLevel);\n          }}\n        >\n          <div className=\"bulbs\"></div>\n          <div className=\"bulbs\"></div>\n          <div className=\"bulbs\"></div>\n          <div className=\"bulbs\"></div>\n          <div className=\"bulbs\"></div>\n        </div>\n      );\n    });\n    return bridgeLevels;\n  };\n\n  return (\n    <div className=\"gb-background\">\n      <div\n        className=\"quit-game light\"\n        onClick={() => {\n          goToGame(null);\n        }}\n      >\n        Quit Game\n      </div>\n      <div className=\"gb-game-checkpoint\">You made it.</div>\n      <div className=\"gb-bridge-container\">\n        <div className=\"gb-bridge-divider left\">{constructTiles(0)}</div>\n        <div className=\"gb-bridge-divider right\">{constructTiles(1)}</div>\n      </div>\n      <div className=\"gb-game-checkpoint\">You start here.</div>\n\n      {showMessageModal ? (\n        <Modal isModalOpen={showMessageModal} showSvg={false} showGreyBG>\n          <>\n            <p>{modalMessage}</p>\n            <Button\n              onClick={() => {\n                setShowMessageModal(false);\n              }}\n              label={'Play Again'}\n            />\n          </>\n        </Modal>\n      ) : null}\n    </div>\n  );\n};\n\nexport default GlassBridge;\n","import React, { useState } from 'react';\nimport './App.css';\nimport GameCard from './components/GameCard/GameCard';\nimport Ddakji from './Ddakji';\nimport GlassBridge from './GlassBridge';\n\nimport Consts from './consts/Consts';\nimport { ToastContainer, Flip, toast } from 'react-toastify';\n\nimport 'react-toastify/dist/ReactToastify.css';\n\nfunction App() {\n  const [currentGame, setCurrentGame] = useState(null);\n\n  const goToGame = (gameId) => {\n    setCurrentGame(gameId);\n  };\n\n  return (\n    <div className=\"App\">\n      {currentGame === null ? (\n        <div class=\"gamecards-wrapper\">\n          <GameCard\n            name=\"Glass Stepping Stones\"\n            gameId={Consts.GAME_IDS.GLASS_BRIDGE}\n            goToGame={goToGame}\n          />\n          <GameCard\n            name=\"Bonus : Ddakji, the recruiting game\"\n            gameId={Consts.GAME_IDS.DDAKJI}\n            goToGame={goToGame}\n          />\n        </div>\n      ) : null}\n      {currentGame === Consts.GAME_IDS.GLASS_BRIDGE ? (\n        <GlassBridge goToGame={goToGame} />\n      ) : null}\n      {currentGame === Consts.GAME_IDS.DDAKJI ? (\n        <Ddakji goToGame={goToGame} />\n      ) : null}\n\n      <ToastContainer\n        position={toast.POSITION.TOP_RIGHT}\n        autoClose={1000}\n        hideProgressBar={false}\n        newestOnTop={false}\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss\n        draggable\n        pauseOnHover\n        transition={Flip}\n        theme=\"dark\"\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}